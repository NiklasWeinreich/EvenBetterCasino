// <auto-generated />
using System;
using Backend.Database.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250513095750_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Database.Entities.Categori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Casino"
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("JackpotAmount")
                        .HasColumnType("int");

                    b.Property<int>("KategoriId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("KategoriId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://i.imgflip.com/7nz6q8.png?a484848",
                            JackpotAmount = 10000,
                            KategoriId = 1,
                            Name = "Football Match",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTUKs7TFCPgIxI0i4E3IwOiAEAGbdfCg8zKmA&s",
                            JackpotAmount = 5000,
                            KategoriId = 2,
                            Name = "Blackjack",
                            Status = true
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.GamesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BetAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.Property<bool>("JackpotWin")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Win")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GamesId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesHistories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BetAmount = 100,
                            Date = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesId = 1,
                            JackpotWin = false,
                            UserId = 1,
                            Win = true
                        },
                        new
                        {
                            Id = 2,
                            BetAmount = 50,
                            Date = new DateTime(2024, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesId = 2,
                            JackpotWin = false,
                            UserId = 2,
                            Win = false
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500,
                            Date = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Direction = "In",
                            Type = "Deposit",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 300,
                            Date = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Direction = "Out",
                            Type = "Withdrawal",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExcludedUntil")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Loss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("NewsLetterIsSubscribed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 100m,
                            BirthDate = new DateTime(1990, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NiklasErEnMaskine@mail.com",
                            FirstName = "Niklas",
                            LastName = "Maskine",
                            Loss = 25m,
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$pLI7kn.OUYNTf.OwHyx4ROCQPYW3x0oHQ3XgSDdrST7KiaLJf1Wc.",
                            PhoneNumber = 12345678,
                            Profit = 50m,
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 75m,
                            BirthDate = new DateTime(1990, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Loss = 55m,
                            NewsLetterIsSubscribed = false,
                            Password = "$2a$11$8n2JEhceHpE4kebH9fKj7.TG.gFr147xAacJzvt3YAjVpWjNkzK32",
                            PhoneNumber = 87654321,
                            Profit = 33m,
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Balance = 100m,
                            BirthDate = new DateTime(1995, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anna.jensen@example.com",
                            FirstName = "Anna",
                            LastName = "Jensen",
                            Loss = 15m,
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$BHtaQP1ih.qiAOzgNxm2mOkJsClbevA9WCW3p/3TncSxIJOREGEk6",
                            PhoneNumber = 11111111,
                            Profit = 20m,
                            Role = 0
                        },
                        new
                        {
                            Id = 4,
                            Balance = 150m,
                            BirthDate = new DateTime(1988, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark.larsen@example.com",
                            FirstName = "Mark",
                            LastName = "Larsen",
                            Loss = 10m,
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$uYgo7mvV/lxdjJQAjs2piexkHWwofd0ZFot4wDlVVWcn.GxNUdtse",
                            PhoneNumber = 22222222,
                            Profit = 40m,
                            Role = 0
                        },
                        new
                        {
                            Id = 5,
                            Balance = 200m,
                            BirthDate = new DateTime(1992, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sara.hansen@example.com",
                            FirstName = "Sara",
                            LastName = "Hansen",
                            Loss = 25m,
                            NewsLetterIsSubscribed = false,
                            Password = "$2a$11$9dGxvZj7G1pJmlHrCJB38.rNQ.gel4rnxUrcvgDXQDYpU9VHdrY3G",
                            PhoneNumber = 33333333,
                            Profit = 30m,
                            Role = 0
                        },
                        new
                        {
                            Id = 6,
                            Balance = 300m,
                            BirthDate = new DateTime(1985, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "peter.madsen@example.com",
                            FirstName = "Peter",
                            LastName = "Madsen",
                            Loss = 40m,
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$ID6iZqJkjjBlmJFLQeJv5uLnC4HqeANSSP4TH8L4i4dOnUOUz71ee",
                            PhoneNumber = 44444444,
                            Profit = 70m,
                            Role = 0
                        },
                        new
                        {
                            Id = 7,
                            Balance = 120m,
                            BirthDate = new DateTime(1998, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "laura.poulsen@example.com",
                            FirstName = "Laura",
                            LastName = "Poulsen",
                            Loss = 5m,
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$h3RaCcZhahfwv/mEB1MrXeDL9xJc1DqKTg2eYZlWuiADmgcXwnVUa",
                            PhoneNumber = 55555555,
                            Profit = 25m,
                            Role = 0
                        },
                        new
                        {
                            Id = 8,
                            Balance = 180m,
                            BirthDate = new DateTime(1982, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thomas.christensen@example.com",
                            FirstName = "Thomas",
                            LastName = "Christensen",
                            Loss = 20m,
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$u2ESsaY9pkBpk0Ly/NWxjOgbln27TiiT8Vr6OnSou8B0.RiCQW9rG",
                            PhoneNumber = 66666666,
                            Profit = 60m,
                            Role = 0
                        },
                        new
                        {
                            Id = 9,
                            Balance = 220m,
                            BirthDate = new DateTime(1994, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emma.andersen@example.com",
                            FirstName = "Emma",
                            LastName = "Andersen",
                            Loss = 10m,
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$wTaTjLRkHrWbe5DA00nhT.asweXLO8vvZco3IBufbaPwAgjFYnGUa",
                            PhoneNumber = 77777777,
                            Profit = 80m,
                            Role = 0
                        },
                        new
                        {
                            Id = 10,
                            Balance = 90m,
                            BirthDate = new DateTime(1989, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mikkel.olsen@example.com",
                            FirstName = "Mikkel",
                            LastName = "Olsen",
                            Loss = 10m,
                            NewsLetterIsSubscribed = false,
                            Password = "$2a$11$Q4.OZMwV23DX4YLBY628Q.SnBeHZC2J.lYjHDrqN1ctE92WERAum6",
                            PhoneNumber = 88888888,
                            Profit = 10m,
                            Role = 0
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.Game", b =>
                {
                    b.HasOne("Backend.Database.Entities.Categori", "Categori")
                        .WithMany("Games")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categori");
                });

            modelBuilder.Entity("Backend.Database.Entities.GamesHistory", b =>
                {
                    b.HasOne("Backend.Database.Entities.Game", "Games")
                        .WithMany("GamesHistories")
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Database.Entities.User", "User")
                        .WithMany("GamesHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Games");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Database.Entities.Transactions", b =>
                {
                    b.HasOne("Backend.Database.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Database.Entities.Categori", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Backend.Database.Entities.Game", b =>
                {
                    b.Navigation("GamesHistories");
                });

            modelBuilder.Entity("Backend.Database.Entities.User", b =>
                {
                    b.Navigation("GamesHistories");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
