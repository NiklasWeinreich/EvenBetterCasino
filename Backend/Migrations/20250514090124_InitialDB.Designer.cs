// <auto-generated />
using System;
using Backend.Database.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250514090124_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Database.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Sports"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Casino"
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("JackpotAmount")
                        .HasColumnType("decimal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("WebUrl")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("GameId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            CategoryId = 1,
                            ImageUrl = "https://i.imgflip.com/7nz6q8.png?a484848",
                            JackpotAmount = 10000m,
                            Name = "Football Match",
                            Status = true
                        },
                        new
                        {
                            GameId = 2,
                            CategoryId = 2,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTUKs7TFCPgIxI0i4E3IwOiAEAGbdfCg8zKmA&s",
                            JackpotAmount = 5000m,
                            Name = "Blackjack",
                            Status = true
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.GameHistory", b =>
                {
                    b.Property<Guid>("GameHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsJackpotWin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWin")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("WasCashedOut")
                        .HasColumnType("bit");

                    b.Property<decimal>("WinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("GameHistoryId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("GameHistories");

                    b.HasData(
                        new
                        {
                            GameHistoryId = new Guid("2f1095cb-a49f-4665-a385-b861758b77e3"),
                            BetAmount = 100m,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 1,
                            IsJackpotWin = false,
                            IsWin = true,
                            UserId = 1,
                            WasCashedOut = false,
                            WinAmount = 0m
                        },
                        new
                        {
                            GameHistoryId = new Guid("60351852-6ce6-4a86-99f3-232df94eadc9"),
                            BetAmount = 50m,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 2,
                            IsJackpotWin = false,
                            IsWin = false,
                            UserId = 2,
                            WasCashedOut = false,
                            WinAmount = 0m
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.Transactions", b =>
                {
                    b.Property<Guid>("TransactionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionsId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionsId = new Guid("f9a12da0-acc1-472a-8f04-761a3c4605e9"),
                            Amount = 500,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Direction = "In",
                            Type = "Deposit",
                            UserId = 1
                        },
                        new
                        {
                            TransactionsId = new Guid("6ac4ebe5-2586-45cc-b030-a25e791b40eb"),
                            Amount = 300,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Direction = "Out",
                            Type = "Withdrawal",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExcludedUntil")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NewsLetterIsSubscribed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 100m,
                            BirthDate = new DateTime(1990, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NiklasErEnMaskine@mail.com",
                            FirstName = "Niklas",
                            LastName = "Maskine",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$JN1IjMEL2gc/pQttRlh/1euYYK0hVLra4qD1ZBbMmUVUQLdi5Y.Hu",
                            PhoneNumber = 12345678,
                            Profit = 50m,
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 75m,
                            BirthDate = new DateTime(1990, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            NewsLetterIsSubscribed = false,
                            Password = "$2a$11$5oN22yoBa5Wgj3yL2Il1JeXlBSSbZpbU6klUJkLYQO6a60N368p2C",
                            PhoneNumber = 87654321,
                            Profit = 33m,
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Balance = 100m,
                            BirthDate = new DateTime(1995, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anna.jensen@example.com",
                            FirstName = "Anna",
                            LastName = "Jensen",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$2/dQoAFmckHRq3NZKfk8tOWTV4d0mzrVVjzFVvia.PIi.1M4ZDzI.",
                            PhoneNumber = 11111111,
                            Profit = 20m,
                            Role = 0
                        },
                        new
                        {
                            Id = 4,
                            Balance = 150m,
                            BirthDate = new DateTime(1988, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark.larsen@example.com",
                            FirstName = "Mark",
                            LastName = "Larsen",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$toryJu342xGdfsEdjiJ7K.ix8CAXNV7mh./WE5ELHq8Bj900mdkh.",
                            PhoneNumber = 22222222,
                            Profit = 40m,
                            Role = 0
                        },
                        new
                        {
                            Id = 5,
                            Balance = 200m,
                            BirthDate = new DateTime(1992, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sara.hansen@example.com",
                            FirstName = "Sara",
                            LastName = "Hansen",
                            NewsLetterIsSubscribed = false,
                            Password = "$2a$11$1u2Aca7aMSmWgFuNPxnkWuxGxEWn8ecj/rd1A5B9HrLz0TVdklSnS",
                            PhoneNumber = 33333333,
                            Profit = 30m,
                            Role = 0
                        },
                        new
                        {
                            Id = 6,
                            Balance = 300m,
                            BirthDate = new DateTime(1985, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "peter.madsen@example.com",
                            FirstName = "Peter",
                            LastName = "Madsen",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$NOYQX62GSXUfeEE/xkDq3OI5abKB38r63qyf51FPRTi/NHu6dUBOG",
                            PhoneNumber = 44444444,
                            Profit = 70m,
                            Role = 0
                        },
                        new
                        {
                            Id = 7,
                            Balance = 120m,
                            BirthDate = new DateTime(1998, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "laura.poulsen@example.com",
                            FirstName = "Laura",
                            LastName = "Poulsen",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$SqgvHCnI8dcCGE3gvSjtneOyAXMMRCyOUK6OiyeF78iRCBj8JnzIS",
                            PhoneNumber = 55555555,
                            Profit = 25m,
                            Role = 0
                        },
                        new
                        {
                            Id = 8,
                            Balance = 180m,
                            BirthDate = new DateTime(1982, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thomas.christensen@example.com",
                            FirstName = "Thomas",
                            LastName = "Christensen",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$TfSHipysw8BmGMkN.4QjF.cypfVq26javfNv2XKgYFFegFFTy9PWi",
                            PhoneNumber = 66666666,
                            Profit = 60m,
                            Role = 0
                        },
                        new
                        {
                            Id = 9,
                            Balance = 220m,
                            BirthDate = new DateTime(1994, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emma.andersen@example.com",
                            FirstName = "Emma",
                            LastName = "Andersen",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$YNtvMx49WvtV1xIQXhfwHuqcS7pAGrQkQH.AeAnt3uhg.Oz2o4ed2",
                            PhoneNumber = 77777777,
                            Profit = 80m,
                            Role = 0
                        },
                        new
                        {
                            Id = 10,
                            Balance = 90m,
                            BirthDate = new DateTime(1989, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mikkel.olsen@example.com",
                            FirstName = "Mikkel",
                            LastName = "Olsen",
                            NewsLetterIsSubscribed = false,
                            Password = "$2a$11$hyIeCsqO4oDPgpLUe/P7Au.TUbQMxI5VgkGzcYR74uretVS.NQ8fG",
                            PhoneNumber = 88888888,
                            Profit = 10m,
                            Role = 0
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.Game", b =>
                {
                    b.HasOne("Backend.Database.Entities.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Backend.Database.Entities.GameHistory", b =>
                {
                    b.HasOne("Backend.Database.Entities.Game", "Game")
                        .WithMany("GameHistories")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Database.Entities.User", "User")
                        .WithMany("GameHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Database.Entities.Transactions", b =>
                {
                    b.HasOne("Backend.Database.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Database.Entities.Category", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Backend.Database.Entities.Game", b =>
                {
                    b.Navigation("GameHistories");
                });

            modelBuilder.Entity("Backend.Database.Entities.User", b =>
                {
                    b.Navigation("GameHistories");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
