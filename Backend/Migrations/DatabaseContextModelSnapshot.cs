// <auto-generated />
using System;
using Backend.Database.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Database.Entities.Categori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Casino"
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.Games", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("JackpotAmount")
                        .HasColumnType("int");

                    b.Property<int>("KategoriId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("KategoriId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://i.imgflip.com/7nz6q8.png?a484848",
                            JackpotAmount = 10000,
                            KategoriId = 1,
                            Name = "Football Match",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTUKs7TFCPgIxI0i4E3IwOiAEAGbdfCg8zKmA&s",
                            JackpotAmount = 5000,
                            KategoriId = 2,
                            Name = "Blackjack",
                            Status = true
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.GamesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BetAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.Property<bool>("JackpotWin")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Win")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GamesId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesHistories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BetAmount = 100,
                            Date = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesId = 1,
                            JackpotWin = false,
                            UserId = 1,
                            Win = true
                        },
                        new
                        {
                            Id = 2,
                            BetAmount = 50,
                            Date = new DateTime(2024, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesId = 2,
                            JackpotWin = false,
                            UserId = 2,
                            Win = false
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 500,
                            Date = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Direction = "In",
                            Type = "Deposit",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 300,
                            Date = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Direction = "Out",
                            Type = "Withdrawal",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExcludedUntil")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Loss")
                        .HasColumnType("int");

                    b.Property<bool>("NewsLetterIsSubscribed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 100m,
                            BirthDate = new DateTime(1990, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NiklasErEnMaskine@mail.com",
                            FirstName = "Niklas",
                            LastName = "Maskine",
                            Loss = 25,
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$64meqozVHeHzl01f9eN7B.lF6Bh4soGLmx0Be8RH2jXCLnk0exgHa",
                            PhoneNumber = 12345678,
                            Profit = 50m,
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 75m,
                            BirthDate = new DateTime(1990, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Loss = 55,
                            NewsLetterIsSubscribed = false,
                            Password = "$2a$11$gu4xch/nr9Eyi343aYzG7uT5Nemx8YfXBaTbhSGB8Wz3DwBJ9yISa",
                            PhoneNumber = 87654321,
                            Profit = 33m,
                            Role = 0
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.Games", b =>
                {
                    b.HasOne("Backend.Database.Entities.Categori", "Categori")
                        .WithMany("Games")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categori");
                });

            modelBuilder.Entity("Backend.Database.Entities.GamesHistory", b =>
                {
                    b.HasOne("Backend.Database.Entities.Games", "Games")
                        .WithMany("GamesHistories")
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Database.Entities.User", "User")
                        .WithMany("GamesHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Games");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Database.Entities.Transactions", b =>
                {
                    b.HasOne("Backend.Database.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Database.Entities.Categori", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Backend.Database.Entities.Games", b =>
                {
                    b.Navigation("GamesHistories");
                });

            modelBuilder.Entity("Backend.Database.Entities.User", b =>
                {
                    b.Navigation("GamesHistories");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
