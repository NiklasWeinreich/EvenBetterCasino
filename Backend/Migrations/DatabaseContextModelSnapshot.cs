// <auto-generated />
using System;
using Backend.Database.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Database.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Sports"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Casino"
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("WebUrl")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("GameId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            CategoryId = 1,
                            ImageUrl = "https://assets.funnygames.dk/2/114572/100319/1024x1024/yatzy.webp",
                            Name = "Yatzy",
                            Status = true,
                            WebUrl = "yatzy",
                            description = "Klassisk terningspil, hvor du skal slå forskellige kombinationer som \"fem ens\" og \"fuldt hus\".\r\nStrategi og held går hånd i hånd i jagten på den højeste score."
                        },
                        new
                        {
                            GameId = 2,
                            CategoryId = 2,
                            ImageUrl = "https://cdn.prod.website-files.com/5ae2e7a18cb7532f0710bdfb/5e21d7084c5acfd2a75b5c0f_small.jpg",
                            Name = "Dice",
                            Status = true,
                            WebUrl = "dice",
                            description = "Gæt om det næste terningekast bliver højere eller lavere end det forrige.\r\nEt hurtigt og simpelt spil, hvor intuition og held afgør sejren."
                        },
                        new
                        {
                            GameId = 3,
                            CategoryId = 2,
                            ImageUrl = "https://mediumrare.imgix.net/12c3bb0487e2239772248e61550a121ee20fe8400a63f386d08896d1122d1655?q=85",
                            Name = "Bombastic",
                            Status = true,
                            WebUrl = "bombastic",
                            description = "Har du nerver er stål? er du gjort af det rette stof? .\r\nHvor mange gange kan du klikke på bomben inden den springer! "
                        },
                        new
                        {
                            GameId = 4,
                            CategoryId = 2,
                            ImageUrl = "https://play-lh.googleusercontent.com/N4wmqXoa1smDCr8Iuc8SdZXJL7N3HJQbbB2bHe-DM4HGjMXX6fHnkJ6htuQAiOQRvQIy",
                            Name = "KENO",
                            Status = true,
                            WebUrl = "Keno",
                            description = "Vælg dine lykketal og se, hvor mange du rammer, når tallene bliver trukket.\r\nEt simpelt og spændende lotterispil med chance for store gevinster."
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.GameHistory", b =>
                {
                    b.Property<Guid>("GameHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsWin")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("WasCashedOut")
                        .HasColumnType("bit");

                    b.Property<decimal>("WinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("GameHistoryId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("GameHistories");

                    b.HasData(
                        new
                        {
                            GameHistoryId = new Guid("feb50b65-9213-4bcd-90fd-9e6bf54e53f5"),
                            BetAmount = 100m,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 1,
                            IsWin = true,
                            UserId = 1,
                            WasCashedOut = false,
                            WinAmount = 0m
                        },
                        new
                        {
                            GameHistoryId = new Guid("8763792b-4ba7-4120-b56c-e2db9484c1da"),
                            BetAmount = 50m,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 2,
                            IsWin = false,
                            UserId = 2,
                            WasCashedOut = false,
                            WinAmount = 0m
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionId = new Guid("f63e55b6-e91a-4382-bbba-9a670780db65"),
                            Amount = 500m,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Indbetaling",
                            UserId = 1
                        },
                        new
                        {
                            TransactionId = new Guid("2270d483-ff2a-46cc-8153-64513cdde5dc"),
                            Amount = 300m,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Udbetaling",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExcludedUntil")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NewsLetterIsSubscribed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 100m,
                            BirthDate = new DateTime(1990, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NiklasErEnMaskine@mail.com",
                            FirstName = "Niklas",
                            LastName = "Maskine",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$JRQDdoemsWXTAqZW4ET7Vu.FBfRaSdkz1iaLi3ZnrFBGsaeI/RjFi",
                            PhoneNumber = 12345678,
                            Profit = 50m,
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 75m,
                            BirthDate = new DateTime(1990, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            NewsLetterIsSubscribed = false,
                            Password = "$2a$11$0v60euZMvVVCEA9iacaYJOax.OO2FjDvGNIi1I9FLPwhLwRMD/Pcu",
                            PhoneNumber = 87654321,
                            Profit = 33m,
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Balance = 100m,
                            BirthDate = new DateTime(1995, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anna.jensen@example.com",
                            FirstName = "Anna",
                            LastName = "Jensen",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$Ex7sens77sUc.00VbIEkQOFULony.RKH7QWX4yJyLFjDgypdcX3xi",
                            PhoneNumber = 11111111,
                            Profit = 20m,
                            Role = 0
                        },
                        new
                        {
                            Id = 4,
                            Balance = 150m,
                            BirthDate = new DateTime(1988, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark.larsen@example.com",
                            FirstName = "Mark",
                            LastName = "Larsen",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$7nbTUtCXjyT5caV4n3FyD.ysBjpLAx80Ig4KhY/hjDYC.It4svH3S",
                            PhoneNumber = 22222222,
                            Profit = 40m,
                            Role = 0
                        },
                        new
                        {
                            Id = 5,
                            Balance = 200m,
                            BirthDate = new DateTime(1992, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sara.hansen@example.com",
                            FirstName = "Sara",
                            LastName = "Hansen",
                            NewsLetterIsSubscribed = false,
                            Password = "$2a$11$31mH8K5/6/U2PQVfSeG4XOWhU51iEXP3tz/Mvx7ReYulPLqkmVUqu",
                            PhoneNumber = 33333333,
                            Profit = 30m,
                            Role = 0
                        },
                        new
                        {
                            Id = 6,
                            Balance = 300m,
                            BirthDate = new DateTime(1985, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "peter.madsen@example.com",
                            FirstName = "Peter",
                            LastName = "Madsen",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$92/HFPYHphGVYRnTvdauHO73Rh16XEFcf5mbyZVdyPgR/5eazzJ/.",
                            PhoneNumber = 44444444,
                            Profit = 70m,
                            Role = 0
                        },
                        new
                        {
                            Id = 7,
                            Balance = 120m,
                            BirthDate = new DateTime(1998, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "laura.poulsen@example.com",
                            FirstName = "Laura",
                            LastName = "Poulsen",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$a8Rd3nqUKpAd6j7sf/WC6eklHt7i1sW7ftOTJnk99PDuTOVLD3kpq",
                            PhoneNumber = 55555555,
                            Profit = 25m,
                            Role = 0
                        },
                        new
                        {
                            Id = 8,
                            Balance = 180m,
                            BirthDate = new DateTime(1982, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thomas.christensen@example.com",
                            FirstName = "Thomas",
                            LastName = "Christensen",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$VZNNuGtcvWVlELXBzgk0o.BUipOagE8.E4tjUMzGybDH2x2jEejDe",
                            PhoneNumber = 66666666,
                            Profit = 60m,
                            Role = 0
                        },
                        new
                        {
                            Id = 9,
                            Balance = 220m,
                            BirthDate = new DateTime(1994, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emma.andersen@example.com",
                            FirstName = "Emma",
                            LastName = "Andersen",
                            NewsLetterIsSubscribed = true,
                            Password = "$2a$11$OUV5926AOh/zEjneSR9AQ.xj1WsQsN8Rls48QMGyhKxFkPw/E9yIC",
                            PhoneNumber = 77777777,
                            Profit = 80m,
                            Role = 0
                        },
                        new
                        {
                            Id = 10,
                            Balance = 90m,
                            BirthDate = new DateTime(1989, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mikkel.olsen@example.com",
                            FirstName = "Mikkel",
                            LastName = "Olsen",
                            NewsLetterIsSubscribed = false,
                            Password = "$2a$11$nLG6mL6NpT9hVBkTSOlt2O9qaauSYseEbUtFcicTQlkvJCiUnoo0e",
                            PhoneNumber = 88888888,
                            Profit = 10m,
                            Role = 0
                        });
                });

            modelBuilder.Entity("Backend.Database.Entities.Game", b =>
                {
                    b.HasOne("Backend.Database.Entities.Category", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Backend.Database.Entities.GameHistory", b =>
                {
                    b.HasOne("Backend.Database.Entities.Game", "Game")
                        .WithMany("GameHistories")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Database.Entities.User", "User")
                        .WithMany("GameHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Database.Entities.Transaction", b =>
                {
                    b.HasOne("Backend.Database.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Database.Entities.Category", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Backend.Database.Entities.Game", b =>
                {
                    b.Navigation("GameHistories");
                });

            modelBuilder.Entity("Backend.Database.Entities.User", b =>
                {
                    b.Navigation("GameHistories");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
